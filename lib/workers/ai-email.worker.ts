import { OpenAI } from 'openai';
import { Resend } from 'resend';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize Resend client
const resend = new Resend(process.env.RESEND_API_KEY);

/**
 * Processes an AI product generation request
 * @param imageUrl - URL of the image to analyze
 * @returns Product details generated by AI
 */
export async function generateProductDetailsFromImage(imageUrl: string) {
  try {
    // Call OpenAI Vision API to analyze the image
    const completion = await openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || 'gpt-4-vision-preview',
      messages: [
        {
          role: 'system',
          content: process.env.AI_PRODUCT_PROMPT || ''
        },
        {
          role: 'user',
          content: [
            { type: 'text', text: 'Analyze this product image and generate details' },
            { type: 'image_url', image_url: { url: imageUrl } }
          ]
        }
      ],
      max_tokens: 300,
    });

    // Parse the response
    const content = completion.choices[0].message.content;
    
    if (!content) {
      throw new Error('No content returned from OpenAI');
    }
    
    // In a real implementation, we would parse the specific fields from the prompt
    // For now, we'll just return the raw content
    return {
      success: true,
      content
    };
  } catch (error) {
    console.error('Error generating product details:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Sends an email notification using Resend
 * @param templateType - Type of email template to use
 * @param data - Data to populate the template with
 * @returns Email sending status
 */
export async function sendEmailNotification(templateType: string, data: any) {
  try {
    let htmlContent = '';
    let subject = '';
    let toEmail = '';
    
    // Determine which email template to use based on type
    switch (templateType) {
      case 'new_order_vendor':
        subject = `You have a new order! (#${data.order.id}) - ${data.store.storeName}`;
        htmlContent = newOrderVendorEmail(data.order, data.store);
        toEmail = data.vendor.email;
        break;
      
      case 'order_confirmation_customer':
        subject = `Your Order #${data.order.id} from ${data.store.storeName} is Confirmed!`;
        htmlContent = orderConfirmationCustomerEmail(data.order, data.store);
        toEmail = data.customer.email;
        break;
      
      case 'shipping_confirmation_customer':
        subject = `Your Order #${data.order.id} from ${data.store.storeName} has Shipped!`;
        htmlContent = shippingConfirmationCustomerEmail(data.order, data.store, data.trackingNumber);
        toEmail = data.customer.email;
        break;
      
      case 'welcome_vendor':
        subject = `Welcome to sellor.ai! Your store ${data.vendor.storeName} is ready`;
        htmlContent = welcomeVendorEmail(data.vendor, data.storeUrl);
        toEmail = data.vendor.email;
        break;
      
      default:
        throw new Error(`Unknown email template type: ${templateType}`);
    }
    
    // Send the email using Resend
    const result = await resend.emails.send({
      from: process.env.EMAIL_FROM || 'notifications@sellor.ai',
      to: [toEmail],
      subject,
      html: htmlContent,
    });
    
    return {
      success: true,
      data: result
    };
  } catch (error) {
    console.error('Error sending email:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// Message handler for the service worker
self.addEventListener('message', async (event) => {
  try {
    const { taskType, data } = event.data;
    
    let result;
    
    switch (taskType) {
      case 'generate_product_details':
        result = await generateProductDetailsFromImage(data.imageUrl);
        break;
      
      case 'send_email_notification':
        result = await sendEmailNotification(data.templateType, data.templateData);
        break;
      
      default:
        result = { success: false, error: `Unknown task type: ${taskType}` };
    }
    
    // Send the result back to the main thread
    postMessage(result);
  } catch (error) {
    postMessage({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
  }
});